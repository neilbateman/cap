{"version":3,"sources":["colors.js","settings.js","layout/LaunchScreen/LaunchScreen.js","layout/Bar/Bar.js","layout/EmptyState/EmptyState.js","content/HomeContent/HomeContent.js","content/NotFoundContent/NotFoundContent.js","layout/AuthProviderList/AuthProviderList.js","dialogs/SignUpDialog/SignUpDialog.js","dialogs/SignInDialog/SignInDialog.js","dialogs/ResetPasswordDialog/ResetPasswordDialog.js","dialogs/WelcomeDialog/WelcomeDialog.js","layout/Profile/Profile.js","dialogs/ConfirmationDialog/ConfirmationDialog.js","tabs/settings/AccountTab/AccountTab.js","tabs/settings/AppearanceTab/AppearanceTab.js","dialogs/SettingsDialog/SettingsDialog.js","dialogs/InputDialog/InputDialog.js","App/App.js","serviceWorker.js","index.js"],"names":["colors","id","name","import","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","gray","blueGray","settings","title","theme","primaryColor","secondaryColor","type","credentials","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LaunchScreen","classes","this","props","CircularProgress","className","circularProgress","Component","withStyles","position","top","left","Bar","openMenu","event","anchorEl","currentTarget","setState","menu","closeMenu","handleSettingsClick","onSettingsClick","handleSignOutClick","onSignOutClick","state","isPerformingAuthAction","isSignedIn","user","onSignUpClick","onSignInClick","AppBar","color","Toolbar","variant","Typography","style","flexGrow","Fragment","IconButton","disabled","onClick","photoURL","Avatar","alt","src","Menu","open","Boolean","onClose","MenuItem","Button","signUpButton","marginRight","spacing","EmptyState","icon","description","button","center","transform","textAlign","HomeContent","emptyStateIcon","Fab","component","Link","to","href","rel","target","buttonIcon","fontSize","marginTop","NotFoundContent","AuthProviderList","onAuthProviderClick","Hidden","only","DialogActions","dialogActions","facebook","auth","FacebookAuthProvider","google","GoogleAuthProvider","gitHub","GithubAuthProvider","twitter","TwitterAuthProvider","dialogActionsMobile","disableSpacing","buttonMobile","justifyContent","marginBottom","display","backgroundColor","initialState","emailAddress","password","passwordConfirmation","errors","SignUpDialog","signUp","validate","constraints","handleExited","handleKeyPress","key","altKey","ctrlKey","metaKey","shiftKey","handleEmailAddressChange","value","handlePasswordChange","handlePasswordConfirmationChange","handleSignUpClick","fullScreen","Dialog","onExited","onKeyPress","DialogTitle","DialogContent","DialogContentText","TextField","autoComplete","error","fullWidth","helperText","label","margin","onChange","required","SignInDialog","signIn","handleSignInClick","onResetPasswordClick","placeholder","ResetPasswordDialog","resetPassword","preventDefault","handleResetPasswordClick","autoFocus","WelcomeDialog","onOkClick","onCancelClick","onVerifyClick","Profile","onChangeAvatarClick","displayName","email","profile","changeAvatarContainer","avatar","Tooltip","changeAvatar","size","info","width","marginLeft","height","ConfirmationDialog","contentText","cancelText","okText","disableOkButton","highlightOkButton","AccountTab","openVerifyEmailAddressDialog","verifyEmailAddressDialog","closeVerifyEmailAddressDialog","callback","verifyEmailAddress","onVerifyEmailAddressClick","isVerifyingEmailAddress","onAddAvatarClick","onAddDisplayNameClick","onChangeDisplayNameClick","onAddEmailAddressClick","isUserComplete","extraTopMargin","root","dialogContentTextUserComplete","List","ListItem","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","secondary","emailVerified","metadata","lastSignInTime","moment","format","creationTime","types","AppearanceTab","onPrimaryColorChange","onSecondaryColorChange","onTypeChange","FormControl","InputLabel","Select","map","index","charAt","toUpperCase","slice","SettingsDialog","changeTab","selectedTab","changeIndex","handleResetClick","defaultTheme","setTimeout","onResetClick","hasDeviatedFromDefaultSettings","Tabs","tabs","indicatorColor","textColor","Tab","onChangeIndex","InputDialog","textField","initializeApp","performance","useDeviceLanguage","createMuiTheme","palette","App","_isMounted","createUserWithEmailAndPassword","then","closeSignUpDialog","openWelcomeDialog","catch","reason","code","message","openSnackbar","finally","signInWithEmailAndPassword","closeSignInDialog","signInWithProvider","provider","signInWithPopup","sendPasswordResetEmail","closeResetPasswordDialog","addAvatar","addAvatarDialog","updateProfile","closeAddAvatarDialog","changeAvatarDialog","closeChangeAvatarDialog","addDisplayName","username","addDisplayNameDialog","closeAddDisplayNameDialog","changeDisplayName","changeDisplayNameDialog","closeChangeDisplayNameDialog","addEmailAddress","addEmailAddressDialog","updateEmail","closeAddEmailAddressDialog","sendEmailVerification","signOut","closeSignOutDialog","updateTheme","removeLocalStorage","find","localStorage","removeItem","setItem","JSON","stringify","resetTheme","changePrimaryColor","changeSecondaryColor","changeType","openSignUpDialog","signUpDialog","openSignInDialog","signInDialog","openResetPasswordDialog","resetPasswordDialog","welcomeDialog","closeWelcomeDialog","openSettingsDialog","settingsDialog","closeSettingsDialog","openAddAvatarDialog","openChangeAvatarDialog","openAddDisplayNameDialog","openChangeDisplayNameDialog","openAddEmailAddressDialog","openSignOutDialog","signOutDialog","handleAvatarChange","handleDisplayNameChange","snackbar","autoHideDuration","readingTime","time","closeSnackbar","clearMessage","isAuthReady","MuiThemeProvider","minHeight","path","exact","render","Snackbar","parse","getItem","removeAuthObserver","onAuthStateChanged","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.764bc7ee.chunk.js","sourcesContent":["import red from '@material-ui/core/colors/red';\r\nimport pink from '@material-ui/core/colors/pink';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport deepPurple from '@material-ui/core/colors/deepPurple';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport lightBlue from '@material-ui/core/colors/lightBlue';\r\nimport cyan from '@material-ui/core/colors/cyan';\r\nimport teal from '@material-ui/core/colors/teal';\r\nimport green from '@material-ui/core/colors/green';\r\nimport lightGreen from '@material-ui/core/colors/lightGreen';\r\nimport lime from '@material-ui/core/colors/lime';\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport brown from '@material-ui/core/colors/brown';\r\nimport gray from '@material-ui/core/colors/grey';\r\nimport blueGray from '@material-ui/core/colors/blueGrey';\r\n\r\nconst colors = [\r\n  {\r\n    id: 'red',\r\n    name: 'Red',\r\n    import: red\r\n  },\r\n  {\r\n    id: 'pink',\r\n    name: 'Pink',\r\n    import: pink\r\n  },\r\n  {\r\n    id: 'purple',\r\n    name: 'Purple',\r\n    import: purple\r\n  },\r\n  {\r\n    id: 'deep-purple',\r\n    name: 'Deep Purple',\r\n    import: deepPurple\r\n  },\r\n  {\r\n    id: 'indigo',\r\n    name: 'Indigo',\r\n    import: indigo\r\n  },\r\n  {\r\n    id: 'blue',\r\n    name: 'Blue',\r\n    import: blue\r\n  },\r\n  {\r\n    id: 'light-blue',\r\n    name: 'Light Blue',\r\n    import: lightBlue\r\n  },\r\n  {\r\n    id: 'cyan',\r\n    name: 'Cyan',\r\n    import: cyan\r\n  },\r\n  {\r\n    id: 'teal',\r\n    name: 'Teal',\r\n    import: teal\r\n  },\r\n  {\r\n    id: 'green',\r\n    name: 'Green',\r\n    import: green\r\n  },\r\n  {\r\n    id: 'light-green',\r\n    name: 'Light Green',\r\n    import: lightGreen\r\n  },\r\n  {\r\n    id: 'lime',\r\n    name: 'Lime',\r\n    import: lime\r\n  },\r\n  {\r\n    id: 'yellow',\r\n    name: 'Yellow',\r\n    import: yellow\r\n  },\r\n  {\r\n    id: 'amber',\r\n    name: 'Amber',\r\n    import: amber\r\n  },\r\n  {\r\n    id: 'orange',\r\n    name: 'Orange',\r\n    import: orange\r\n  },\r\n  {\r\n    id: 'deep-orange',\r\n    name: 'Deep Orange',\r\n    import: deepOrange\r\n  },\r\n  {\r\n    id: 'brown',\r\n    name: 'Brown',\r\n    import: brown\r\n  },\r\n  {\r\n    id: 'gray',\r\n    name: 'Gray',\r\n    import: gray\r\n  },\r\n  {\r\n    id: 'blue-gray',\r\n    name: 'Blue Gray',\r\n    import: blueGray\r\n  }\r\n];\r\n\r\nexport default colors;","/* eslint-disable no-unused-vars */\r\n\r\nimport red from '@material-ui/core/colors/red';\r\nimport pink from '@material-ui/core/colors/pink';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport deepPurple from '@material-ui/core/colors/deepPurple';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport lightBlue from '@material-ui/core/colors/lightBlue';\r\nimport cyan from '@material-ui/core/colors/cyan';\r\nimport teal from '@material-ui/core/colors/teal';\r\nimport green from '@material-ui/core/colors/green';\r\nimport lightGreen from '@material-ui/core/colors/lightGreen';\r\nimport lime from '@material-ui/core/colors/lime';\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport brown from '@material-ui/core/colors/brown';\r\nimport gray from '@material-ui/core/colors/grey';\r\nimport blueGray from '@material-ui/core/colors/blueGrey';\r\n\r\n/* eslint-enable no-unused-vars */\r\n\r\nconst settings = {\r\n  title: 'Lake Jackson ZombieFest!',\r\n\r\n  theme: {\r\n    primaryColor: {\r\n      name: 'blue',\r\n      import: blue\r\n    },\r\n    secondaryColor: {\r\n      name: 'red',\r\n      import: red\r\n    },\r\n    type: 'light'\r\n  },\r\n\r\n  credentials: {\r\n    firebase: {\r\n      apiKey: \"AIzaSyCapz1xuUrGPVWyOSRi0QkfHqUdLevK7Iw\",\r\n      authDomain: \"zombiefestlj.firebaseapp.com\",\r\n      databaseURL: \"https://zombiefestlj.firebaseio.com\",\r\n      projectId: \"zombiefestlj\",\r\n      storageBucket: \"\",\r\n      messagingSenderId: \"376509238185\",\r\n      appId: \"1:376509238185:web:7fa32feabb7aaf045cd2b8\"\r\n    }\r\n  }\r\n};\r\n\r\n\r\nexport default settings;\r\n","import React, {Component} from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst styles = (theme) => ({\r\n  circularProgress: {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%'\r\n  }\r\n});\r\n\r\nclass LaunchScreen extends Component {\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <CircularProgress className={classes.circularProgress} />\r\n    );\r\n  }\r\n}\r\n\r\nLaunchScreen.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(LaunchScreen);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport PersonIcon from '@material-ui/icons/Person';\r\n\r\nconst styles = (theme) => ({\r\n  signUpButton: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n});\r\n\r\nclass Bar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      menu: {\r\n        anchorEl: null\r\n      }\r\n    };\r\n  }\r\n\r\n  openMenu = (event) => {\r\n    const anchorEl = event.currentTarget;\r\n\r\n    this.setState({\r\n      menu: {\r\n        anchorEl\r\n      }\r\n    });\r\n  };\r\n\r\n  closeMenu = () => {\r\n    this.setState({\r\n      menu: {\r\n        anchorEl: null\r\n      }\r\n    });\r\n  };\r\n\r\n  handleSettingsClick = () => {\r\n    this.closeMenu();\r\n    this.props.onSettingsClick();\r\n  };\r\n\r\n  handleSignOutClick = () => {\r\n    this.closeMenu();\r\n    this.props.onSignOutClick();\r\n  };\r\n\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { title, isPerformingAuthAction, isSignedIn, user } = this.props;\r\n\r\n    // Events\r\n    const { onSignUpClick, onSignInClick } = this.props;\r\n\r\n    const { menu } = this.state;\r\n\r\n    return (\r\n      <AppBar color=\"primary\" position=\"static\">\r\n        <Toolbar variant=\"regular\">\r\n          <Typography style={{ flexGrow: 1 }} color=\"inherit\" variant=\"h6\">{title}</Typography>\r\n\r\n          {isSignedIn &&\r\n            <React.Fragment>\r\n              <IconButton color=\"inherit\" disabled={isPerformingAuthAction} onClick={this.openMenu}>\r\n                {user.photoURL ? <Avatar alt=\"Avatar\" src={user.photoURL} /> : <PersonIcon />}\r\n              </IconButton>\r\n\r\n              <Menu anchorEl={menu.anchorEl} open={Boolean(menu.anchorEl)} onClose={this.closeMenu}>\r\n                <MenuItem disabled={isPerformingAuthAction} onClick={this.handleSettingsClick}>Settings</MenuItem>\r\n                <MenuItem disabled={isPerformingAuthAction} onClick={this.handleSignOutClick}>Sign out</MenuItem>\r\n              </Menu>\r\n            </React.Fragment>\r\n          }\r\n\r\n          {!isSignedIn &&\r\n            <React.Fragment>\r\n              <Button className={classes.signUpButton} color=\"secondary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={onSignUpClick}>Sign Up</Button>\r\n              <Button color=\"secondary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={onSignInClick}>Sign In</Button>\r\n            </React.Fragment>\r\n          }\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n}\r\n\r\nBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  \r\n  title: PropTypes.string.isRequired,\r\n  isPerformingAuthAction: PropTypes.bool.isRequired,\r\n  isSignedIn: PropTypes.bool.isRequired,\r\n\r\n  onSettingsClick: PropTypes.func.isRequired,\r\n  onSignOutClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Bar);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  center: {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    textAlign: 'center'\r\n  }\r\n};\r\n\r\nclass EmptyState extends Component {\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { icon, title, description, button } = this.props;\r\n\r\n    return (\r\n      <div className={classes.center}>\r\n        {icon}\r\n        {title && <Typography color=\"textSecondary\" variant=\"h4\">{title}</Typography>}\r\n        {description && <Typography color=\"textSecondary\" variant=\"subtitle1\">{description}</Typography>}\r\n        {button}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEmptyState.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  icon: PropTypes.element,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n  button: PropTypes.element\r\n};\r\n\r\nexport default withStyles(styles)(EmptyState);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nimport GitHubCircleIcon from 'mdi-material-ui/GithubCircle';\r\n\r\nimport EmptyState from '../../layout/EmptyState/EmptyState';\r\n\r\nconst styles = (theme) => ({\r\n  emptyStateIcon: {\r\n    fontSize: theme.spacing(12)\r\n  },\r\n\r\n  button: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n});\r\n\r\nclass HomeContent extends Component {\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { isSignedIn, title } = this.props;\r\n\r\n    if (isSignedIn) {\r\n      return (\r\n        <EmptyState\r\n          icon={<HomeIcon className={classes.emptyStateIcon} color=\"action\" />}\r\n          title=\"Home\"\r\n          description=\"Welcome to the early stages of Lake Jackson ZombieFest new website\"\r\n          button={\r\n            <Fab className={classes.button} color=\"secondary\" component={Link} to=\"/some-magic\" variant=\"extended\">\r\n              Click For Horrors!\r\n            </Fab>\r\n          }\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <EmptyState\r\n        icon={<CodeIcon className={classes.emptyStateIcon} color=\"action\" />}\r\n        title={title}\r\n        description=\"Future website for Lake Jackson ZombieFest\"\r\n        button={\r\n          <Fab className={classes.button} color=\"secondary\" href=\"https://github.com/neilbateman\" rel=\"noopener noreferrer\" target=\"_blank\" variant=\"extended\">\r\n            <GitHubCircleIcon className={classes.buttonIcon} />\r\n            GitHub\r\n          </Fab>\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nHomeContent.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  isSignedIn: PropTypes.bool.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(HomeContent);\r\n","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport FindIcon from '@material-ui/icons/FindInPage';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nimport EmptyState from '../../layout/EmptyState/EmptyState';\r\n\r\nconst styles = (theme) => ({\r\n  emptyStateIcon: {\r\n    fontSize: theme.spacing(12)\r\n  },\r\n\r\n  button: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n});\r\n\r\nclass NotFoundContent extends Component {\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <EmptyState\r\n        icon={<FindIcon className={classes.emptyStateIcon} color=\"action\" />}\r\n        title=\"Content Not Found\"\r\n        description=\"The requested URL was not found on this server\"\r\n        button={\r\n          <Fab className={classes.button} color=\"secondary\" component={Link} to=\"/\" variant=\"extended\">\r\n            <HomeIcon className={classes.buttonIcon} /> Go Home\r\n          </Fab>\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nNotFoundContent.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(NotFoundContent);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport firebase from 'firebase/app';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport FacebookBoxIcon from 'mdi-material-ui/FacebookBox';\r\nimport GoogleIcon from 'mdi-material-ui/Google';\r\nimport GitHubCircleIcon from 'mdi-material-ui/GithubCircle';\r\nimport TwitterIcon from 'mdi-material-ui/Twitter';\r\n\r\nconst styles = (theme) => ({\r\n  dialogActions: {\r\n    justifyContent: 'center',\r\n\r\n    marginTop: theme.spacing(2.5),\r\n    marginBottom: theme.spacing(1)\r\n  },\r\n\r\n  dialogActionsMobile: {\r\n    display: 'grid',\r\n    justifyContent: 'stretch',\r\n\r\n    marginTop: theme.spacing(2.5),\r\n    marginBottom: -theme.spacing(0.5)\r\n  },\r\n\r\n  buttonMobile: {\r\n    marginBottom: theme.spacing(1.5)\r\n  },\r\n\r\n  facebook: {\r\n    backgroundColor: '#3c5a99',\r\n    color: '#ffffff'\r\n  },\r\n\r\n  google: {\r\n    backgroundColor: '#4285f4',\r\n    color: '#ffffff'\r\n  },\r\n\r\n  gitHub: {\r\n    backgroundColor: '#24292e',\r\n    color: '#ffffff'\r\n  },\r\n\r\n  twitter: {\r\n    backgroundColor: '#1da1f2',\r\n    color: '#ffffff'\r\n  },\r\n\r\n  icon: {\r\n    marginRight: theme.spacing(0.5)\r\n  }\r\n});\r\n\r\nclass AuthProviderList extends Component {\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { isPerformingAuthAction } = this.props;\r\n\r\n    // Events\r\n    const { onAuthProviderClick } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Hidden only=\"xs\">\r\n          <DialogActions className={classes.dialogActions}>\r\n            <Button className={classes.facebook} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.FacebookAuthProvider())}>\r\n              <FacebookBoxIcon className={classes.icon} />\r\n              Facebook\r\n            </Button>\r\n\r\n            <Button className={classes.google} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.GoogleAuthProvider())}>\r\n              <GoogleIcon className={classes.icon} />\r\n              Google\r\n            </Button>\r\n\r\n            <Button className={classes.gitHub} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.GithubAuthProvider())}>\r\n              <GitHubCircleIcon className={classes.icon} />\r\n              GitHub\r\n            </Button>\r\n\r\n            <Button className={classes.twitter} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.TwitterAuthProvider())}>\r\n              <TwitterIcon className={classes.icon} />\r\n              Twitter\r\n            </Button>\r\n          </DialogActions>\r\n        </Hidden>\r\n\r\n        <Hidden only={['sm', 'md', 'lg', 'xl']}>\r\n          <DialogActions className={classes.dialogActionsMobile} disableSpacing>\r\n            <Button className={`${classes.facebook} ${classes.buttonMobile}`} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.FacebookAuthProvider())}>\r\n              <FacebookBoxIcon className={classes.icon} />\r\n              Facebook\r\n            </Button>\r\n\r\n            <Button className={`${classes.google} ${classes.buttonMobile}`} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.GoogleAuthProvider())}>\r\n              <GoogleIcon className={classes.icon} />\r\n              Google\r\n            </Button>\r\n\r\n            <Button className={`${classes.gitHub} ${classes.buttonMobile}`} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.GithubAuthProvider())}>\r\n              <GitHubCircleIcon className={classes.icon} />\r\n              GitHub\r\n            </Button>\r\n\r\n            <Button className={`${classes.twitter} ${classes.buttonMobile}`} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.TwitterAuthProvider())}>\r\n              <TwitterIcon className={classes.icon} />\r\n              Twitter\r\n            </Button>\r\n          </DialogActions>\r\n        </Hidden>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nAuthProviderList.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  isPerformingAuthAction: PropTypes.bool,\r\n\r\n  onAuthProviderClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(AuthProviderList);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport validate from 'validate.js';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport constraints from '../../constraints';\r\n\r\nimport AuthProviderList from '../../layout/AuthProviderList/AuthProviderList';\r\n\r\nconst initialState = {\r\n  emailAddress: '',\r\n  password: '',\r\n  passwordConfirmation: '',\r\n\r\n  errors: null\r\n};\r\n\r\nclass SignUpDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = initialState;\r\n  }\r\n\r\n  signUp = () => {\r\n    const { emailAddress, password, passwordConfirmation } = this.state;\r\n    \r\n    const errors = validate({\r\n      emailAddress: emailAddress,\r\n      password: password,\r\n      passwordConfirmation: passwordConfirmation\r\n    }, {\r\n      emailAddress: constraints.emailAddress,\r\n      password: constraints.password,\r\n      passwordConfirmation: constraints.passwordConfirmation\r\n    });\r\n\r\n    if (errors) {\r\n      this.setState({ errors });\r\n    } else {\r\n      this.setState({\r\n        errors: null\r\n      }, () => {\r\n        this.props.signUp(emailAddress, password, passwordConfirmation);\r\n      });\r\n    }\r\n  };\r\n\r\n  handleExited = () => {\r\n    this.setState(initialState);\r\n  };\r\n\r\n  handleKeyPress = (event) => {\r\n    const key = event.key;\r\n\r\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'Enter') {\r\n      this.signUp();\r\n    }\r\n  };\r\n\r\n  handleEmailAddressChange = (event) => {\r\n    const emailAddress = event.target.value;\r\n\r\n    this.setState({ emailAddress });\r\n  };\r\n\r\n  handlePasswordChange = (event) => {\r\n    const password = event.target.value;\r\n\r\n    this.setState({ password });\r\n  };\r\n\r\n  handlePasswordConfirmationChange = (event) => {\r\n    const passwordConfirmation = event.target.value;\r\n\r\n    this.setState({ passwordConfirmation });\r\n  };\r\n\r\n  handleSignUpClick = () => {\r\n    this.signUp();\r\n  };\r\n\r\n  render() {\r\n    // Properties\r\n    const { fullScreen, open, isPerformingAuthAction } = this.props;\r\n\r\n    // Events\r\n    const { onClose, onAuthProviderClick } = this.props;\r\n\r\n    const { emailAddress, password, passwordConfirmation, errors } = this.state;\r\n\r\n    return (\r\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onExited={this.handleExited} onKeyPress={this.handleKeyPress}>\r\n        <DialogTitle>\r\n          Sign up for an account\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Create an account to access features that are unavailable to users who haven't signed up.\r\n          </DialogContentText>\r\n\r\n          <AuthProviderList isPerformingAuthAction={isPerformingAuthAction} onAuthProviderClick={onAuthProviderClick} />\r\n\r\n          <form>\r\n            <TextField\r\n              autoComplete=\"email\"\r\n              error={!!(errors && errors.emailAddress)}\r\n              fullWidth\r\n              helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\r\n              label=\"E-mail address\"\r\n              margin=\"normal\"\r\n              onChange={this.handleEmailAddressChange}\r\n              required\r\n              type=\"email\"\r\n              value={emailAddress}\r\n            />\r\n\r\n            <TextField\r\n              autoComplete=\"new-password\"\r\n              error={!!(errors && errors.password)}\r\n              fullWidth\r\n              helperText={(errors && errors.password) ? errors.password[0] : ''}\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              onChange={this.handlePasswordChange}\r\n              required\r\n              type=\"password\"\r\n              value={password}\r\n            />\r\n\r\n            <TextField\r\n              autoComplete=\"password\"\r\n              error={!!(errors && errors.passwordConfirmation)}\r\n              fullWidth\r\n              helperText={(errors && errors.passwordConfirmation) ? errors.passwordConfirmation[0] : ''}\r\n              label=\"Password confirmation\"\r\n              margin=\"normal\"\r\n              onChange={this.handlePasswordConfirmationChange}\r\n              required\r\n              type=\"password\"\r\n              value={passwordConfirmation}\r\n            />\r\n          </form>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={onClose}>Cancel</Button>\r\n          <Button color=\"primary\" disabled={(!emailAddress || !password || !passwordConfirmation) || isPerformingAuthAction} variant=\"contained\" onClick={this.handleSignUpClick}>Sign Up</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nSignUpDialog.propTypes = {\r\n  fullScreen: PropTypes.bool,\r\n  open: PropTypes.bool.isRequired,\r\n\r\n  isPerformingAuthAction: PropTypes.bool.isRequired,\r\n\r\n  signUp: PropTypes.func.isRequired,\r\n\r\n  onClose: PropTypes.func.isRequired,\r\n  onAuthProviderClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SignUpDialog;","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport validate from 'validate.js';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport constraints from '../../constraints';\r\n\r\nimport AuthProviderList from '../../layout/AuthProviderList/AuthProviderList';\r\n\r\nconst initialState = {\r\n  emailAddress: '',\r\n  password: '',\r\n\r\n  errors: null\r\n};\r\n\r\nclass SignInDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = initialState;\r\n  }\r\n\r\n  signIn = () => {\r\n    const { emailAddress, password } = this.state;\r\n    \r\n    const errors = validate({\r\n      emailAddress: emailAddress,\r\n      password: password\r\n    }, {\r\n      emailAddress: constraints.emailAddress,\r\n      password: constraints.password\r\n    });\r\n\r\n    if (errors) {\r\n      this.setState({ errors });\r\n    } else {\r\n      this.setState({\r\n        errors: null\r\n      }, () => {\r\n        this.props.signIn(emailAddress, password);\r\n      });\r\n    }\r\n  };\r\n\r\n  handleExited = () => {\r\n    this.setState(initialState);\r\n  };\r\n\r\n  handleKeyPress = (event) => {\r\n    const key = event.key;\r\n\r\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'Enter') {\r\n      this.signIn();\r\n    }\r\n  };\r\n\r\n  handleEmailAddressChange = (event) => {\r\n    const emailAddress = event.target.value;\r\n\r\n    this.setState({ emailAddress });\r\n  };\r\n\r\n  handlePasswordChange = (event) => {\r\n    const password = event.target.value;\r\n\r\n    this.setState({ password });\r\n  };\r\n\r\n  handleSignInClick = () => {\r\n    this.signIn();\r\n  };\r\n\r\n  render() {\r\n    // Properties\r\n    const { fullScreen, open, isPerformingAuthAction } = this.props;\r\n\r\n    // Events\r\n    const { onClose, onAuthProviderClick, onResetPasswordClick } = this.props;\r\n\r\n    const { emailAddress, password, errors } = this.state;\r\n\r\n    return (\r\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onExited={this.handleExited} onKeyPress={this.handleKeyPress}>\r\n        <DialogTitle>\r\n          Sign in to your account\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Some features might be unavailable until you sign in.\r\n            While you're signed in you can manage your account.\r\n          </DialogContentText>\r\n\r\n          <AuthProviderList isPerformingAuthAction={isPerformingAuthAction} onAuthProviderClick={onAuthProviderClick} />\r\n\r\n          <form>\r\n            <TextField\r\n              autoComplete=\"email\"\r\n              error={!!(errors && errors.emailAddress)}\r\n              fullWidth\r\n              helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\r\n              margin=\"normal\"\r\n              onChange={this.handleEmailAddressChange}\r\n              placeholder=\"E-mail address\"\r\n              required\r\n              type=\"email\"\r\n              value={emailAddress}\r\n            />\r\n\r\n            <TextField\r\n              autoComplete=\"current-password\"\r\n              error={!!(errors && errors.password)}\r\n              fullWidth\r\n              helperText={(errors && errors.password) ? errors.password[0] : ''}\r\n              margin=\"normal\"\r\n              onChange={this.handlePasswordChange}\r\n              placeholder=\"Password\"\r\n              required\r\n              type=\"password\"\r\n              value={password}\r\n            />\r\n          </form>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={onClose}>Cancel</Button>\r\n          <Button color=\"primary\" disabled={isPerformingAuthAction} variant=\"outlined\" onClick={onResetPasswordClick}>Reset Password</Button>\r\n          <Button color=\"primary\" disabled={(!emailAddress || !password) || isPerformingAuthAction} variant=\"contained\" onClick={this.handleSignInClick}>Sign In</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nSignInDialog.propTypes = {\r\n  fullScreen: PropTypes.bool,\r\n  open: PropTypes.bool.isRequired,\r\n\r\n  isPerformingAuthAction: PropTypes.bool.isRequired,\r\n\r\n  signIn: PropTypes.func.isRequired,\r\n\r\n  onClose: PropTypes.func.isRequired,\r\n  onAuthProviderClick: PropTypes.func.isRequired,\r\n  onResetPasswordClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SignInDialog;","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport validate from 'validate.js';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport constraints from '../../constraints';\r\n\r\nconst initialState = {\r\n  emailAddress: '',\r\n\r\n  errors: null\r\n};\r\n\r\nclass ResetPasswordDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = initialState;\r\n  }\r\n\r\n  resetPassword = () => {\r\n    const { emailAddress } = this.state;\r\n    \r\n    const errors = validate({\r\n      emailAddress: emailAddress\r\n    }, {\r\n      emailAddress: constraints.emailAddress\r\n    });\r\n\r\n    if (errors) {\r\n      this.setState({ errors });\r\n    } else {\r\n      this.setState({\r\n        errors: null\r\n      }, () => {\r\n        this.props.resetPassword(emailAddress);\r\n      });\r\n    }\r\n  };\r\n\r\n  handleExited = () => {\r\n    this.setState(initialState);\r\n  };\r\n\r\n  handleKeyPress = (event) => {\r\n    const key = event.key;\r\n\r\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'Enter') {\r\n      event.preventDefault();\r\n\r\n      this.resetPassword();\r\n    }\r\n  };\r\n\r\n  handleEmailAddressChange = (event) => {\r\n    const emailAddress = event.target.value;\r\n\r\n    this.setState({ emailAddress });\r\n  };\r\n\r\n  handleResetPasswordClick = () => {\r\n    this.resetPassword();\r\n  };\r\n\r\n  render() {\r\n    // Properties\r\n    const { open, isPerformingAuthAction } = this.props;\r\n\r\n    // Events\r\n    const { onClose } = this.props;\r\n\r\n    const { emailAddress, errors } = this.state;\r\n\r\n    return (\r\n      <Dialog open={open} onClose={onClose} onExited={this.handleExited} onKeyPress={this.handleKeyPress}>\r\n        <DialogTitle>\r\n          Reset your password\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            An e-mail will be sent to your e-mail address containing instructions on how to reset your password.\r\n          </DialogContentText>\r\n\r\n          <form>\r\n            <TextField\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              error={!!(errors && errors.emailAddress)}\r\n              fullWidth\r\n              helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\r\n              margin=\"normal\"\r\n              onChange={this.handleEmailAddressChange}\r\n              placeholder=\"E-mail address\"\r\n              required\r\n              type=\"email\"\r\n              value={emailAddress}\r\n            />\r\n          </form>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={onClose}>Cancel</Button>\r\n          <Button color=\"primary\" disabled={!emailAddress || isPerformingAuthAction} variant=\"contained\" onClick={this.handleResetPasswordClick}>Reset Password</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nResetPasswordDialog.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n\r\n  isPerformingAuthAction: PropTypes.bool.isRequired,\r\n\r\n  resetPassword: PropTypes.func.isRequired,\r\n\r\n  onClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ResetPasswordDialog;","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass WelcomeDialog extends Component {\r\n  handleKeyPress = (event) => {\r\n    const key = event.key;\r\n\r\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'Enter') {\r\n      this.props.onOkClick();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // Dialog Properties\r\n    const { fullScreen, open } = this.props;\r\n\r\n    // Custom Properties\r\n    const { title, isPerformingAuthAction } = this.props;\r\n\r\n    // Dialog Events\r\n    const { onClose } = this.props;\r\n\r\n    // Custom Events\r\n    const { onCancelClick, onVerifyClick } = this.props;\r\n\r\n    return (\r\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onKeyPress={this.handleKeyPress}>\r\n        <DialogTitle>\r\n          Welcome to {title}!\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Complete your account by verifying your e-mail address.\r\n            An e-mail will be sent to your e-mail address containing instructions on how to verify your e-mail address.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={onCancelClick}>Cancel</Button>\r\n          <Button color=\"primary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={onVerifyClick}>Verify</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nWelcomeDialog.propTypes = {\r\n  fullScreen: PropTypes.bool,\r\n  open: PropTypes.bool.isRequired,\r\n\r\n  title: PropTypes.string.isRequired,\r\n  isPerformingAuthAction: PropTypes.bool.isRequired,\r\n\r\n  onClose: PropTypes.func.isRequired,\r\n\r\n  onCancelClick: PropTypes.func.isRequired,\r\n  onVerifyClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default WelcomeDialog;","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst styles = (theme) => ({\r\n  profile: {\r\n    textAlign: 'center',\r\n\r\n    marginTop: theme.spacing(1)\r\n  },\r\n\r\n  changeAvatarContainer: {\r\n    position: 'relative',\r\n    width: '50%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto'\r\n  },\r\n\r\n  avatar: {\r\n    width: theme.spacing(12),\r\n    height: theme.spacing(12),\r\n    marginRight: 'auto',\r\n    marginLeft: 'auto'\r\n  },\r\n\r\n  changeAvatar: {\r\n    position: 'absolute',\r\n    top: '-7.5%',\r\n    left: '60%',\r\n  },\r\n\r\n  info: {\r\n    marginTop: theme.spacing(0.5)\r\n  },\r\n\r\n  emailAddress: {\r\n    marginTop: -theme.spacing(0.5)\r\n  },\r\n});\r\n\r\nclass Profile extends Component {\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { user, isPerformingAuthAction } = this.props;\r\n\r\n    // Events\r\n    const { onChangeAvatarClick } = this.props;\r\n\r\n    if (!user.photoURL || !user.displayName || !user.email) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.profile}>\r\n        <div className={classes.changeAvatarContainer}>\r\n          <Avatar className={classes.avatar} alt=\"Avatar\" src={user.photoURL} />\r\n\r\n          {onChangeAvatarClick &&\r\n            <Tooltip title=\"Change avatar\">\r\n              <Fab className={classes.changeAvatar} color=\"primary\" disabled={isPerformingAuthAction} size=\"small\" onClick={onChangeAvatarClick}>\r\n                <EditIcon />\r\n              </Fab>\r\n            </Tooltip>\r\n          }\r\n        </div>\r\n\r\n        <div className={classes.info}>\r\n          <Typography variant=\"h6\">{user.displayName}</Typography>\r\n          <Typography className={classes.emailAddress} color=\"textSecondary\" variant=\"body1\">{user.email}</Typography>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProfile.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  user: PropTypes.object.isRequired,\r\n  isPerformingAuthAction: PropTypes.bool,\r\n\r\n  onChangeAvatarClick: PropTypes.func\r\n};\r\n\r\nexport default withStyles(styles)(Profile);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ConfirmationDialog extends Component {\r\n  handleKeyPress = (event) => {\r\n    const key = event.key;\r\n\r\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'Enter') {\r\n      this.props.onOkClick();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // Dialog Properties\r\n    const { open } = this.props;\r\n\r\n    // Custom Properties\r\n    const {\r\n      title,\r\n      contentText,\r\n      cancelText,\r\n      okText,\r\n      disableOkButton,\r\n      highlightOkButton\r\n    } = this.props;\r\n\r\n    // Dialog Events\r\n    const { onClose } = this.props;\r\n\r\n    // Custom Events\r\n    const { onCancelClick, onOkClick } = this.props;\r\n\r\n    if (!onClose) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Dialog open={open} onClose={onClose} onKeyPress={this.handleKeyPress}>\r\n        {title && <DialogTitle>{title}</DialogTitle>}\r\n\r\n        {contentText &&\r\n          <DialogContent>\r\n            <DialogContentText>{contentText}</DialogContentText>\r\n          </DialogContent>\r\n        }\r\n\r\n        {(onCancelClick || onOkClick) &&\r\n          <DialogActions>\r\n            {onCancelClick &&\r\n              <Button color=\"primary\" onClick={onCancelClick}>\r\n                {cancelText || 'Cancel'}\r\n              </Button>\r\n            }\r\n\r\n            {onOkClick &&\r\n              <Button color=\"primary\" disabled={disableOkButton} variant={highlightOkButton && 'contained'} onClick={onOkClick}>\r\n                {okText || 'OK'}\r\n              </Button>\r\n            }\r\n          </DialogActions>\r\n        }\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nConfirmationDialog.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n\r\n  title: PropTypes.string,\r\n  contentText: PropTypes.string,\r\n  cancelText: PropTypes.string,\r\n  okText: PropTypes.string,\r\n  disableOkButton: PropTypes.bool,\r\n  highlightOkButton: PropTypes.bool,\r\n\r\n  onClose: PropTypes.func.isRequired,\r\n  onCancelClick: PropTypes.func,\r\n  onOkClick: PropTypes.func\r\n};\r\n\r\nexport default ConfirmationDialog;","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport moment from 'moment';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PortraitIcon from '@material-ui/icons/Portrait';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\n\r\nimport Profile from '../../../layout/Profile/Profile';\r\n\r\nimport ConfirmationDialog from '../../../dialogs/ConfirmationDialog/ConfirmationDialog';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    marginBottom: theme.spacing(0)\r\n  },\r\n\r\n  dialogContentTextUserComplete: {\r\n    marginTop: theme.spacing(1)\r\n  }\r\n});\r\n\r\nclass AccountTab extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      verifyEmailAddressDialog: {\r\n        open: false\r\n      }\r\n    };\r\n  }\r\n\r\n  openVerifyEmailAddressDialog = () => {\r\n    this.setState({\r\n      verifyEmailAddressDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeVerifyEmailAddressDialog = (callback) => {\r\n    this.setState({\r\n      verifyEmailAddressDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  verifyEmailAddress = () => {\r\n    this.closeVerifyEmailAddressDialog(() => {\r\n      this.props.onVerifyEmailAddressClick();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { user, isPerformingAuthAction, isVerifyingEmailAddress } = this.props;\r\n\r\n    // Events\r\n    const { onAddAvatarClick, onChangeAvatarClick, onAddDisplayNameClick, onChangeDisplayNameClick, onAddEmailAddressClick } = this.props;\r\n\r\n    const { verifyEmailAddressDialog } = this.state;\r\n\r\n    const isUserComplete = (user.photoURL && user.displayName && user.email);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Profile user={user} isPerformingAuthAction={isPerformingAuthAction} extraTopMargin onChangeAvatarClick={onChangeAvatarClick} />\r\n\r\n        <DialogContentText classes={{ root: classes.root }} className={isUserComplete && classes.dialogContentTextUserComplete}>\r\n          Here's some info about your account. You can manage your account through the tabs.\r\n        </DialogContentText>\r\n\r\n        <List>\r\n          {!user.photoURL &&\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Tooltip title=\"Avatar\">\r\n                  <PortraitIcon />\r\n                </Tooltip>\r\n              </ListItemIcon>\r\n\r\n              <ListItemText primary=\"You don't have an avatar. Add one!\" />\r\n\r\n              <ListItemSecondaryAction>\r\n                <Button color=\"primary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={onAddAvatarClick}>Add</Button>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          }\r\n\r\n          {user.displayName &&\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Tooltip title=\"Display name\">\r\n                  <PersonIcon />\r\n                </Tooltip>\r\n              </ListItemIcon>\r\n\r\n              <ListItemText primary=\"Display name\" secondary={user.displayName} />\r\n\r\n              <ListItemSecondaryAction>\r\n                <Tooltip title=\"Change\">\r\n                  <IconButton disabled={isPerformingAuthAction} onClick={onChangeDisplayNameClick}>\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          }\r\n\r\n          {!user.displayName &&\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Tooltip title=\"Display name\">\r\n                  <PersonIcon />\r\n                </Tooltip>\r\n              </ListItemIcon>\r\n\r\n              <ListItemText primary=\"You don't have a display name. Add one!\" />\r\n\r\n              <ListItemSecondaryAction>\r\n                <Button color=\"primary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={onAddDisplayNameClick}>Add</Button>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          }\r\n\r\n          {user.email &&\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Tooltip title=\"E-mail address\">\r\n                  <EmailIcon />\r\n                </Tooltip>\r\n              </ListItemIcon>\r\n\r\n              <ListItemText\r\n                primary={user.email}\r\n                secondary={\r\n                  <React.Fragment>\r\n                    {user.emailVerified && 'Verified'}\r\n                    {(!user.emailVerified && isVerifyingEmailAddress) && 'Awaiting e-mail address verification'}\r\n                    {(!user.emailVerified && !isVerifyingEmailAddress) && 'Not verified'}\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n\r\n              {!user.emailVerified &&\r\n                <ListItemSecondaryAction>\r\n                  {isVerifyingEmailAddress && <CircularProgress />}\r\n                  {!isVerifyingEmailAddress && <Button color=\"primary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={this.openVerifyEmailAddressDialog}>Verify</Button>}\r\n                </ListItemSecondaryAction>\r\n              }\r\n            </ListItem>\r\n          }\r\n\r\n          {!user.email &&\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Tooltip title=\"E-mail address\">\r\n                  <EmailIcon />\r\n                </Tooltip>\r\n              </ListItemIcon>\r\n\r\n              <ListItemText primary=\"You don't have an e-mail address. Add one!\" />\r\n\r\n              <ListItemSecondaryAction>\r\n                <Button color=\"primary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={onAddEmailAddressClick}>Add</Button>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          }\r\n\r\n          {user.metadata.lastSignInTime &&\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Tooltip title=\"Last sign-in\">\r\n                  <AccessTimeIcon />\r\n                </Tooltip>\r\n              </ListItemIcon>\r\n\r\n              <ListItemText primary=\"Last sign-in\" secondary={moment(user.metadata.lastSignInTime).format('LLLL')} />\r\n            </ListItem>\r\n          }\r\n\r\n          {user.metadata.creationTime &&\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Tooltip title=\"Signed up\">\r\n                  <AccessTimeIcon />\r\n                </Tooltip>\r\n              </ListItemIcon>\r\n\r\n              <ListItemText primary=\"Signed up\" secondary={moment(user.metadata.creationTime).format('LLLL')} />\r\n            </ListItem>\r\n          }\r\n        </List>\r\n\r\n        <ConfirmationDialog\r\n          open={verifyEmailAddressDialog.open}\r\n\r\n          title=\"Send verification e-mail?\"\r\n          contentText=\"An e-mail will be sent to your e-mail address containing instructions on how to verify your e-mail address.\"\r\n          okText=\"Send\"\r\n          disableOkButton={isPerformingAuthAction}\r\n          highlightOkButton\r\n\r\n          onClose={this.closeVerifyEmailAddressDialog}\r\n\r\n          onCancelClick={this.closeVerifyEmailAddressDialog}\r\n          onOkClick={this.verifyEmailAddress}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nAccountTab.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  user: PropTypes.object.isRequired,\r\n  isPerformingAuthAction: PropTypes.bool.isRequired,\r\n  isVerifyingEmailAddress: PropTypes.bool.isRequired,\r\n\r\n  onAddAvatarClick: PropTypes.func.isRequired,\r\n  onChangeAvatarClick: PropTypes.func.isRequired,\r\n  onAddDisplayNameClick: PropTypes.func.isRequired,\r\n  onChangeDisplayNameClick: PropTypes.func.isRequired,\r\n  onAddEmailAddressClick: PropTypes.func.isRequired,\r\n  onVerifyEmailAddressClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(AccountTab);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    marginBottom: theme.spacing(0)\r\n  }\r\n});\r\n\r\nconst types = [\r\n  'light',\r\n  'dark'\r\n];\r\n\r\nclass AppearanceTab extends Component {\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { colors, primaryColor, secondaryColor, type } = this.props;\r\n\r\n    // Events\r\n    const { onPrimaryColorChange, onSecondaryColorChange, onTypeChange } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <DialogContentText classes={{ root: classes.root }}>\r\n          The app's primary and secondary colors, and their variants, help create a color theme that is harmonious,\r\n          ensures accessible text, and distinguishes UI elements and surfaces from one another.\r\n        </DialogContentText>\r\n\r\n        <FormControl fullWidth margin=\"normal\">\r\n          <InputLabel>Primary color</InputLabel>\r\n\r\n          <Select onChange={onPrimaryColorChange} value={primaryColor}>\r\n            {colors.map((color) => {\r\n              return (<MenuItem key={color.id} value={color.id}>{color.name}</MenuItem>);\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth margin=\"normal\">\r\n          <InputLabel>Secondary color</InputLabel>\r\n\r\n          <Select onChange={onSecondaryColorChange} value={secondaryColor}>\r\n            {colors.map((color) => {\r\n              return (<MenuItem key={color.id} value={color.id}>{color.name}</MenuItem>);\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth margin=\"normal\">\r\n          <InputLabel>Type</InputLabel>\r\n\r\n          <Select onChange={onTypeChange} value={type}>\r\n            {types.map((type, index) => {\r\n              return (<MenuItem key={index} value={type}>{type.charAt(0).toUpperCase() + type.slice(1)}</MenuItem>);\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nAppearanceTab.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  colors: PropTypes.array.isRequired,\r\n  primaryColor: PropTypes.string.isRequired,\r\n  secondaryColor: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n\r\n  onPrimaryColorChange: PropTypes.func.isRequired,\r\n  onSecondaryColorChange: PropTypes.func.isRequired,\r\n  onTypeChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(AppearanceTab);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Button from '@material-ui/core/Button';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nimport AccountTab from '../../tabs/settings/AccountTab/AccountTab';\r\nimport AppearanceTab from '../../tabs/settings/AppearanceTab/AppearanceTab';\r\n\r\nconst styles = (theme) => ({\r\n  tabs: {\r\n    marginBottom: theme.spacing(1)\r\n  }\r\n});\r\n\r\nclass SettingsDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedTab: 0\r\n    };\r\n  }\r\n\r\n  handleKeyPress = (event) => {\r\n    const key = event.key;\r\n\r\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'Enter') {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  changeTab = (event, value) => {\r\n    this.setState({\r\n      selectedTab: value\r\n    });\r\n  };\r\n\r\n  changeIndex = (index) => {\r\n    this.setState({\r\n      selectedTab: index\r\n    });\r\n  };\r\n\r\n  handleResetClick = () => {\r\n    const { primaryColor, secondaryColor, type, defaultTheme } = this.props;\r\n\r\n    if (primaryColor !== defaultTheme.primaryColor || secondaryColor !== defaultTheme.secondaryColor || type !== defaultTheme.type) {\r\n      setTimeout(this.props.onResetClick, 137.5);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const {\r\n      fullScreen,\r\n      open,\r\n      user,\r\n      isPerformingAuthAction,\r\n      isVerifyingEmailAddress,\r\n      colors,\r\n      primaryColor,\r\n      secondaryColor,\r\n      type,\r\n      defaultTheme\r\n    } = this.props;\r\n\r\n    // Events\r\n    const {\r\n      onClose,\r\n      onAddAvatarClick,\r\n      onChangeAvatarClick,\r\n      onAddDisplayNameClick,\r\n      onChangeDisplayNameClick,\r\n      onAddEmailAddressClick,\r\n      onVerifyEmailAddressClick,\r\n      onPrimaryColorChange,\r\n      onSecondaryColorChange,\r\n      onTypeChange\r\n    } = this.props;\r\n\r\n    const { selectedTab } = this.state;\r\n\r\n    let hasDeviatedFromDefaultSettings = false;\r\n\r\n    if (defaultTheme) {\r\n      hasDeviatedFromDefaultSettings = (\r\n        primaryColor !== defaultTheme.primaryColor.name ||\r\n        secondaryColor !== defaultTheme.secondaryColor.name ||\r\n        type !== defaultTheme.type\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onKeyPress={this.handleKeyPress}>\r\n        <DialogTitle>Settings</DialogTitle>\r\n\r\n        <Tabs className={classes.tabs} indicatorColor=\"primary\" textColor=\"primary\" onChange={this.changeTab} value={selectedTab} variant=\"fullWidth\">\r\n          <Tab label=\"Account\" />\r\n          <Tab label=\"Appearance\" />\r\n        </Tabs>\r\n\r\n        <DialogContent>\r\n          <Hidden only=\"xs\">\r\n            {selectedTab === 0 &&\r\n              <AccountTab\r\n                user={user}\r\n                isPerformingAuthAction={isPerformingAuthAction}\r\n                isVerifyingEmailAddress={isVerifyingEmailAddress}\r\n                onAddAvatarClick={onAddAvatarClick}\r\n                onChangeAvatarClick={onChangeAvatarClick}\r\n                onAddDisplayNameClick={onAddDisplayNameClick}\r\n                onChangeDisplayNameClick={onChangeDisplayNameClick}\r\n                onAddEmailAddressClick={onAddEmailAddressClick}\r\n                onVerifyEmailAddressClick={onVerifyEmailAddressClick}\r\n              />\r\n            }\r\n\r\n            {selectedTab === 1 &&\r\n              <AppearanceTab\r\n                colors={colors}\r\n                primaryColor={primaryColor}\r\n                secondaryColor={secondaryColor}\r\n                type={type}\r\n                onPrimaryColorChange={onPrimaryColorChange}\r\n                onSecondaryColorChange={onSecondaryColorChange}\r\n                onTypeChange={onTypeChange}\r\n              />\r\n            }\r\n          </Hidden>\r\n\r\n          <Hidden only={['sm', 'md', 'lg', 'xl']}>\r\n            <SwipeableViews index={selectedTab} onChangeIndex={this.changeIndex}>\r\n              <AccountTab\r\n                user={user}\r\n                isPerformingAuthAction={isPerformingAuthAction}\r\n                isVerifyingEmailAddress={isVerifyingEmailAddress}\r\n                onAddAvatarClick={onAddAvatarClick}\r\n                onChangeAvatarClick={onChangeAvatarClick}\r\n                onAddDisplayNameClick={onAddDisplayNameClick}\r\n                onChangeDisplayNameClick={onChangeDisplayNameClick}\r\n                onAddEmailAddressClick={onAddEmailAddressClick}\r\n                onVerifyEmailAddressClick={onVerifyEmailAddressClick}\r\n              />\r\n\r\n              <AppearanceTab\r\n                colors={colors}\r\n                primaryColor={primaryColor}\r\n                secondaryColor={secondaryColor}\r\n                type={type}\r\n                onPrimaryColorChange={onPrimaryColorChange}\r\n                onSecondaryColorChange={onSecondaryColorChange}\r\n                onTypeChange={onTypeChange}\r\n              />\r\n            </SwipeableViews>\r\n          </Hidden>\r\n        </DialogContent>\r\n\r\n        {(selectedTab === 1 && hasDeviatedFromDefaultSettings) &&\r\n          <React.Fragment>\r\n            <Hidden only=\"xs\">\r\n              <DialogActions>\r\n                <Button color=\"primary\" variant=\"contained\" onClick={this.handleResetClick}>Reset</Button>\r\n              </DialogActions>\r\n            </Hidden>\r\n\r\n            <Hidden only={['sm', 'md', 'lg', 'xl']}>\r\n              <DialogActions>\r\n                <Button color=\"primary\" onClick={onClose}>Cancel</Button>\r\n                <Button color=\"primary\" variant=\"outlined\" onClick={this.handleResetClick}>Reset</Button>\r\n                <Button color=\"primary\" variant=\"contained\" onClick={onClose}>OK</Button>\r\n              </DialogActions>\r\n            </Hidden>\r\n          </React.Fragment>\r\n        }\r\n\r\n        {(selectedTab !== 1 || !hasDeviatedFromDefaultSettings) &&\r\n          <Hidden only={['sm', 'md', 'lg', 'xl']}>\r\n            <DialogActions>\r\n              <Button color=\"primary\" onClick={onClose}>Cancel</Button>\r\n              <Button color=\"primary\" variant=\"contained\" onClick={onClose}>OK</Button>\r\n            </DialogActions>\r\n          </Hidden>\r\n        }\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nSettingsDialog.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  fullScreen: PropTypes.bool,\r\n  open: PropTypes.bool.isRequired,\r\n\r\n  user: PropTypes.object.isRequired,\r\n  isPerformingAuthAction: PropTypes.bool.isRequired,\r\n  isVerifyingEmailAddress: PropTypes.bool.isRequired,\r\n  colors: PropTypes.array.isRequired,\r\n  primaryColor: PropTypes.string.isRequired,\r\n  secondaryColor: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n\r\n  onClose: PropTypes.func.isRequired,\r\n  onAddAvatarClick: PropTypes.func.isRequired,\r\n  onChangeAvatarClick: PropTypes.func.isRequired,\r\n  onAddDisplayNameClick: PropTypes.func.isRequired,\r\n  onChangeDisplayNameClick: PropTypes.func.isRequired,\r\n  onAddEmailAddressClick: PropTypes.func.isRequired,\r\n  onVerifyEmailAddressClick: PropTypes.func.isRequired,\r\n  onPrimaryColorChange: PropTypes.func.isRequired,\r\n  onSecondaryColorChange: PropTypes.func.isRequired,\r\n  onTypeChange: PropTypes.func.isRequired,\r\n  onResetClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(SettingsDialog);","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass InputDialog extends Component {\r\n  handleKeyPress = (event) => {\r\n    const key = event.key;\r\n\r\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'Enter') {\r\n      event.preventDefault();\r\n\r\n      this.props.onOkClick();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // Dialog Properties\r\n    const { fullScreen, open } = this.props;\r\n\r\n    // Custom Properties\r\n    const { title, contentText, textField, cancelText, okText, disableOkButton, highlightOkButton } = this.props;\r\n\r\n    // Dialog Events\r\n    const { onClose, onExited } = this.props;\r\n\r\n    // Custom Events\r\n    const { onCancelClick, onOkClick } = this.props;\r\n\r\n    if (!onClose) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onExited={onExited} onKeyPress={this.handleKeyPress}>\r\n        {title && <DialogTitle>{title}</DialogTitle>}\r\n\r\n        {contentText &&\r\n          <DialogContent>\r\n            <DialogContentText>{contentText}</DialogContentText>\r\n\r\n            {textField &&\r\n              <form>\r\n                {textField}\r\n              </form>\r\n            }\r\n          </DialogContent>\r\n        }\r\n\r\n        {(onCancelClick || onOkClick) &&\r\n          <DialogActions>\r\n            {onCancelClick &&\r\n              <Button color=\"primary\" onClick={onCancelClick}>\r\n                {cancelText || 'Cancel'}\r\n              </Button>\r\n            }\r\n\r\n            {onOkClick &&\r\n              <Button color=\"primary\" disabled={disableOkButton} variant={highlightOkButton && 'contained'} onClick={onOkClick}>\r\n                {okText || 'OK'}\r\n              </Button>\r\n            }\r\n          </DialogActions>\r\n        }\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nInputDialog.propTypes = {\r\n  fullScreen: PropTypes.bool,\r\n  open: PropTypes.bool.isRequired,\r\n\r\n  title: PropTypes.string,\r\n  contentText: PropTypes.string,\r\n  textField: PropTypes.element,\r\n  cancelText: PropTypes.string,\r\n  okText: PropTypes.string,\r\n  disableOkButton: PropTypes.bool,\r\n  highlightOkButton: PropTypes.bool,\r\n\r\n  onClose: PropTypes.func.isRequired,\r\n  onExited: PropTypes.func,\r\n  onCancelClick: PropTypes.func,\r\n  onOkClick: PropTypes.func\r\n};\r\n\r\nexport default InputDialog;","// React\r\nimport React, { Component } from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n// validate.js\r\nimport validate from 'validate.js';\r\n\r\n// Firebase\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/performance';\r\n\r\nimport readingTime from 'reading-time';\r\n\r\n// Material-UI\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\n// Custom\r\nimport colors from '../colors';\r\nimport settings from '../settings';\r\nimport constraints from '../constraints';\r\n\r\nimport LaunchScreen from '../layout/LaunchScreen/LaunchScreen';\r\n\r\nimport Bar from '../layout/Bar/Bar';\r\n\r\nimport HomeContent from '../content/HomeContent/HomeContent';\r\nimport NotFoundContent from '../content/NotFoundContent/NotFoundContent';\r\n\r\nimport SignUpDialog from '../dialogs/SignUpDialog/SignUpDialog';\r\nimport SignInDialog from '../dialogs/SignInDialog/SignInDialog';\r\nimport ResetPasswordDialog from '../dialogs/ResetPasswordDialog/ResetPasswordDialog';\r\nimport WelcomeDialog from '../dialogs/WelcomeDialog/WelcomeDialog';\r\nimport SettingsDialog from '../dialogs/SettingsDialog/SettingsDialog';\r\nimport InputDialog from '../dialogs/InputDialog/InputDialog';\r\nimport ConfirmationDialog from '../dialogs/ConfirmationDialog/ConfirmationDialog';\r\n\r\nfirebase.initializeApp(settings.credentials.firebase);\r\n\r\nconst auth = firebase.auth();\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst performance = firebase.performance();\r\n\r\nauth.useDeviceLanguage();\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    primary: settings.theme.primaryColor.import,\r\n    secondary: settings.theme.secondaryColor.import,\r\n    type: settings.theme.type\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      primaryColor: settings.theme.primaryColor.name,\r\n      secondaryColor: settings.theme.secondaryColor.name,\r\n      type: settings.theme.type,\r\n\r\n      isAuthReady: false,\r\n      isPerformingAuthAction: false,\r\n      isVerifyingEmailAddress: false,\r\n      isSignedIn: false,\r\n\r\n      user: null,\r\n      avatar: '',\r\n      displayName: '',\r\n      emailAddress: '',\r\n\r\n      signUpDialog: {\r\n        open: false\r\n      },\r\n\r\n      signInDialog: {\r\n        open: false\r\n      },\r\n\r\n      resetPasswordDialog: {\r\n        open: false\r\n      },\r\n\r\n      welcomeDialog: {\r\n        open: false\r\n      },\r\n\r\n      settingsDialog: {\r\n        open: false\r\n      },\r\n\r\n      addAvatarDialog: {\r\n        open: false,\r\n\r\n        errors: null\r\n      },\r\n\r\n      changeAvatarDialog: {\r\n        open: false,\r\n\r\n        errors: null\r\n      },\r\n\r\n      addDisplayNameDialog: {\r\n        open: false,\r\n\r\n        errors: null\r\n      },\r\n\r\n      changeDisplayNameDialog: {\r\n        open: false,\r\n\r\n        errors: null\r\n      },\r\n\r\n      addEmailAddressDialog: {\r\n        open: false,\r\n\r\n        errors: null\r\n      },\r\n\r\n      signOutDialog: {\r\n        open: false\r\n      },\r\n\r\n      snackbar: {\r\n        autoHideDuration: 0,\r\n        message: '',\r\n        open: false\r\n      }\r\n    };\r\n  }\r\n\r\n  signUp = (emailAddress, password, passwordConfirmation) => {\r\n    if (this.state.isSignedIn) {\r\n      return;\r\n    }\r\n\r\n    if (!emailAddress || !password || !passwordConfirmation) {\r\n      return;\r\n    }\r\n\r\n    const errors = validate({\r\n      emailAddress: emailAddress,\r\n      password: password,\r\n      passwordConfirmation: passwordConfirmation\r\n    }, {\r\n      emailAddress: constraints.emailAddress,\r\n      password: constraints.password,\r\n      passwordConfirmation: constraints.passwordConfirmation\r\n    });\r\n\r\n    if (errors) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      auth.createUserWithEmailAndPassword(emailAddress, password).then((value) => {\r\n        this.closeSignUpDialog(() => {\r\n          this.openWelcomeDialog();\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          case 'auth/email-already-in-use':\r\n          case 'auth/invalid-email':\r\n          case 'auth/operation-not-allowed':\r\n          case 'auth/weak-password':\r\n            this.openSnackbar(message);\r\n            return;\r\n\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  signIn = (emailAddress, password) => {\r\n    if (this.state.isSignedIn) {\r\n      return;\r\n    }\r\n\r\n    if (!emailAddress || !password) {\r\n      return;\r\n    }\r\n\r\n    const errors = validate({\r\n      emailAddress: emailAddress,\r\n      password: password,\r\n    }, {\r\n      emailAddress: constraints.emailAddress,\r\n      password: constraints.password\r\n    });\r\n\r\n    if (errors) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      auth.signInWithEmailAndPassword(emailAddress, password).then((value) => {\r\n        this.closeSignInDialog(() => {\r\n          const user = value.user;\r\n          const displayName = user.displayName;\r\n          const emailAddress = user.email;\r\n\r\n          this.openSnackbar(`Signed in as ${displayName || emailAddress}`);\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          case 'auth/invalid-email':\r\n          case 'auth/user-disabled':\r\n          case 'auth/user-not-found':\r\n          case 'auth/wrong-password':\r\n            this.openSnackbar(message);\r\n            return;\r\n\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  signInWithProvider = (provider) => {\r\n    if (this.state.isSignedIn) {\r\n      return;\r\n    }\r\n\r\n    if (!provider) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      auth.signInWithPopup(provider).then((value) => {\r\n        this.closeSignUpDialog(() => {\r\n          this.closeSignInDialog(() => {\r\n            const user = value.user;\r\n            const displayName = user.displayName;\r\n            const emailAddress = user.email;\r\n\r\n            this.openSnackbar(`Signed in as ${displayName || emailAddress}`);\r\n          });\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          case 'auth/account-exists-with-different-credential':\r\n          case 'auth/auth-domain-config-required':\r\n          case 'auth/cancelled-popup-request':\r\n          case 'auth/operation-not-allowed':\r\n          case 'auth/operation-not-supported-in-this-environment':\r\n          case 'auth/popup-blocked':\r\n          case 'auth/popup-closed-by-user':\r\n          case 'auth/unauthorized-domain':\r\n            this.openSnackbar(message);\r\n            return;\r\n\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  resetPassword = (emailAddress) => {\r\n    if (this.state.isSignedIn) {\r\n      return;\r\n    }\r\n\r\n    if (!emailAddress) {\r\n      return;\r\n    }\r\n\r\n    const errors = validate({\r\n      emailAddress: emailAddress\r\n    }, {\r\n      emailAddress: constraints.emailAddress\r\n    });\r\n\r\n    if (errors) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      auth.sendPasswordResetEmail(emailAddress).then(() => {\r\n        this.closeResetPasswordDialog(() => {\r\n          this.openSnackbar(`Password reset e-mail sent to ${emailAddress}`);\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          case 'auth/invalid-email':\r\n          case 'auth/missing-android-pkg-name':\r\n          case 'auth/missing-continue-uri':\r\n          case 'auth/missing-ios-bundle-id':\r\n          case 'auth/invalid-continue-uri':\r\n          case 'auth/unauthorized-continue-uri':\r\n          case 'auth/user-not-found':\r\n            this.openSnackbar(message);\r\n            return;\r\n\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  addAvatar = () => {\r\n    const { user, isSignedIn, avatar } = this.state;\r\n\r\n    if (!user || !isSignedIn || !avatar) {\r\n      return;\r\n    }\r\n\r\n    if (user.photoURL) {\r\n      return;\r\n    }\r\n\r\n    const errors = validate({\r\n      avatar: avatar\r\n    }, {\r\n      avatar: constraints.avatar\r\n    });\r\n\r\n    if (errors) {\r\n      this.setState((state) => ({\r\n        addAvatarDialog: {\r\n          ...state.addAvatarDialog,\r\n          errors\r\n        }\r\n      }));\r\n\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      user.updateProfile({ photoURL: avatar }).then(() => {\r\n        this.closeAddAvatarDialog(() => {\r\n          this.openSnackbar('Avatar added');\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  changeAvatar = () => {\r\n    const { user, isSignedIn, avatar } = this.state;\r\n\r\n    if (!user || !isSignedIn || !avatar) {\r\n      return;\r\n    }\r\n\r\n    const errors = validate({\r\n      avatar: avatar\r\n    }, {\r\n      avatar: constraints.avatar\r\n    });\r\n\r\n    if (errors) {\r\n      this.setState((state) => ({\r\n        changeAvatarDialog: {\r\n          ...state.changeAvatarDialog,\r\n          errors\r\n        }\r\n      }));\r\n\r\n      return;\r\n    }\r\n\r\n    if (user.photoURL === avatar) {\r\n      this.openSnackbar('Avatar already being used');\r\n\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      user.updateProfile({ photoURL: avatar }).then(() => {\r\n        this.closeChangeAvatarDialog(() => {\r\n          this.openSnackbar('Avatar changed');\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  addDisplayName = () => {\r\n    const { user, isSignedIn, displayName } = this.state;\r\n\r\n    if (!user || !isSignedIn || !displayName) {\r\n      return;\r\n    }\r\n\r\n    if (user.displayName) {\r\n      return;\r\n    }\r\n\r\n    const errors = validate({\r\n      displayName: displayName\r\n    }, {\r\n      displayName: constraints.username\r\n    });\r\n\r\n    if (errors) {\r\n      this.setState((state) => ({\r\n        addDisplayNameDialog: {\r\n          ...state.addDisplayNameDialog,\r\n          errors\r\n        }\r\n      }));\r\n\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      user.updateProfile({ displayName }).then(() => {\r\n        this.closeAddDisplayNameDialog(() => {\r\n          this.openSnackbar('Display name added');\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  changeDisplayName = () => {\r\n    const { user, isSignedIn, displayName } = this.state;\r\n\r\n    if (!user || !isSignedIn || !displayName) {\r\n      return;\r\n    }\r\n\r\n    const errors = validate({\r\n      displayName: displayName\r\n    }, {\r\n      displayName: constraints.username\r\n    });\r\n\r\n    if (errors) {\r\n      this.setState((state) => ({\r\n        changeDisplayNameDialog: {\r\n          ...state.changeDisplayNameDialog,\r\n          errors\r\n        }\r\n      }));\r\n\r\n      return;\r\n    }\r\n\r\n    if (displayName === user.displayName) {\r\n      this.openSnackbar(`Display name is already ${displayName}`);\r\n\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      user.updateProfile({ displayName }).then(() => {\r\n        this.closeChangeDisplayNameDialog(() => {\r\n          this.openSnackbar('Display name changed');\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  addEmailAddress = () => {\r\n    const { user, isSignedIn, emailAddress } = this.state;\r\n\r\n    if (!user || !isSignedIn || !emailAddress) {\r\n      return;\r\n    }\r\n\r\n    if (user.email) {\r\n      return;\r\n    }\r\n\r\n    const errors = validate({\r\n      emailAddress: emailAddress\r\n    }, {\r\n      emailAddress: constraints.emailAddress\r\n    });\r\n\r\n    if (errors) {\r\n      this.setState((state) => ({\r\n        addEmailAddressDialog: {\r\n          ...state.addEmailAddressDialog,\r\n          errors\r\n        }\r\n      }));\r\n\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      user.updateEmail(emailAddress).then(() => {\r\n        this.closeAddEmailAddressDialog(() => {\r\n          this.openSnackbar('E-mail address added');\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  verifyEmailAddress = (callback) => {\r\n    const { user, isSignedIn } = this.state;\r\n\r\n    if (!user || !user.email || !isSignedIn) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      user.sendEmailVerification().then(() => {\r\n        this.setState({\r\n          isVerifyingEmailAddress: true\r\n        }, () => {\r\n          const emailAddress = user.email;\r\n\r\n          this.openSnackbar(`Verification e-mail sent to ${emailAddress}`);\r\n\r\n          if (callback && typeof callback === 'function') {\r\n            callback();\r\n          }\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          case 'auth/missing-android-pkg-name':\r\n          case 'auth/missing-continue-uri':\r\n          case 'auth/missing-ios-bundle-id':\r\n          case 'auth/invalid-continue-uri':\r\n          case 'auth/unauthorized-continue-uri':\r\n            this.openSnackbar(message);\r\n            return;\r\n\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  signOut = () => {\r\n    if (!this.state.isSignedIn) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isPerformingAuthAction: true\r\n    }, () => {\r\n      auth.signOut().then(() => {\r\n        this.closeSignOutDialog(() => {\r\n          this.openSnackbar('Signed out');\r\n        });\r\n      }).catch((reason) => {\r\n        const code = reason.code;\r\n        const message = reason.message;\r\n\r\n        switch (code) {\r\n          default:\r\n            this.openSnackbar(message);\r\n            return;\r\n        }\r\n      }).finally(() => {\r\n        this.setState({\r\n          isPerformingAuthAction: false\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  updateTheme = (palette, removeLocalStorage, callback) => {\r\n    const { primaryColor, secondaryColor, type } = this.state;\r\n\r\n    if (!palette.primaryColor) {\r\n      palette.primaryColor = primaryColor;\r\n    }\r\n\r\n    if (!palette.secondaryColor) {\r\n      palette.secondaryColor = secondaryColor;\r\n    }\r\n\r\n    if (!palette.type) {\r\n      palette.type = type;\r\n    }\r\n\r\n    theme = createMuiTheme({\r\n      palette: {\r\n        primary: colors.find(color => color.id === palette.primaryColor).import,\r\n        secondary: colors.find(color => color.id === palette.secondaryColor).import,\r\n        type: palette.type\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      primaryColor: palette.primaryColor,\r\n      secondaryColor: palette.secondaryColor,\r\n      type: palette.type\r\n    }, () => {\r\n      if (removeLocalStorage) {\r\n        localStorage.removeItem('theme');\r\n      } else {\r\n        localStorage.setItem('theme', JSON.stringify({\r\n          primaryColor: palette.primaryColor,\r\n          secondaryColor: palette.secondaryColor,\r\n          type: palette.type\r\n        }));\r\n      }\r\n\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  resetTheme = () => {\r\n    this.updateTheme({\r\n      primaryColor: settings.theme.primaryColor.name,\r\n      secondaryColor: settings.theme.secondaryColor.name,\r\n      type: settings.theme.type\r\n    }, true, () => {\r\n      this.openSnackbar('Settings reset');\r\n    });\r\n  };\r\n\r\n  changePrimaryColor = (event) => {\r\n    const primaryColor = event.target.value;\r\n\r\n    this.updateTheme({\r\n      primaryColor\r\n    });\r\n  };\r\n\r\n  changeSecondaryColor = (event) => {\r\n    const secondaryColor = event.target.value;\r\n\r\n    this.updateTheme({\r\n      secondaryColor\r\n    });\r\n  };\r\n\r\n  changeType = (event) => {\r\n    const type = event.target.value;\r\n\r\n    this.updateTheme({\r\n      type\r\n    });\r\n  };\r\n\r\n  openSignUpDialog = () => {\r\n    this.setState({\r\n      signUpDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeSignUpDialog = (callback) => {\r\n    this.setState({\r\n      signUpDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openSignInDialog = () => {\r\n    this.setState({\r\n      signInDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeSignInDialog = (callback) => {\r\n    this.setState({\r\n      signInDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openResetPasswordDialog = () => {\r\n    this.setState({\r\n      resetPasswordDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeResetPasswordDialog = (callback) => {\r\n    this.setState({\r\n      resetPasswordDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openWelcomeDialog = () => {\r\n    this.setState({\r\n      welcomeDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeWelcomeDialog = (callback) => {\r\n    this.setState({\r\n      welcomeDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openSettingsDialog = () => {\r\n    this.setState({\r\n      settingsDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeSettingsDialog = (callback) => {\r\n    this.setState({\r\n      settingsDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openAddAvatarDialog = () => {\r\n    this.setState({\r\n      addAvatarDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeAddAvatarDialog = (callback) => {\r\n    this.setState({\r\n      addAvatarDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openChangeAvatarDialog = () => {\r\n    this.setState({\r\n      changeAvatarDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeChangeAvatarDialog = (callback) => {\r\n    this.setState({\r\n      changeAvatarDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openAddDisplayNameDialog = () => {\r\n    this.setState({\r\n      addDisplayNameDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeAddDisplayNameDialog = (callback) => {\r\n    this.setState({\r\n      addDisplayNameDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openChangeDisplayNameDialog = () => {\r\n    this.setState({\r\n      changeDisplayNameDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeChangeDisplayNameDialog = (callback) => {\r\n    this.setState({\r\n      changeDisplayNameDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openAddEmailAddressDialog = () => {\r\n    this.setState({\r\n      addEmailAddressDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeAddEmailAddressDialog = (callback) => {\r\n    this.setState({\r\n      addEmailAddressDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  openSignOutDialog = () => {\r\n    this.setState({\r\n      signOutDialog: {\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeSignOutDialog = (callback) => {\r\n    this.setState({\r\n      signOutDialog: {\r\n        open: false\r\n      }\r\n    }, () => {\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  };\r\n\r\n  handleAvatarChange = (event) => {\r\n    const avatar = event.target.value;\r\n\r\n    this.setState({ avatar });\r\n  };\r\n\r\n  handleDisplayNameChange = (event) => {\r\n    const displayName = event.target.value;\r\n\r\n    this.setState({ displayName });\r\n  };\r\n\r\n  handleEmailAddressChange = (event) => {\r\n    const emailAddress = event.target.value;\r\n\r\n    this.setState({ emailAddress });\r\n  };\r\n\r\n  openSnackbar = (message) => {\r\n    this.setState({\r\n      snackbar: {\r\n        autoHideDuration: readingTime(message).time * 2,\r\n        message,\r\n        open: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeSnackbar = (clearMessage = false) => {\r\n    const { snackbar } = this.state;\r\n\r\n    this.setState({\r\n      snackbar: {\r\n        message: clearMessage ? '' : snackbar.message,\r\n        open: false\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      primaryColor,\r\n      secondaryColor,\r\n      type,\r\n      isAuthReady,\r\n      isPerformingAuthAction,\r\n      isVerifyingEmailAddress,\r\n      isSignedIn,\r\n      user,\r\n      avatar,\r\n      displayName,\r\n      emailAddress\r\n    } = this.state;\r\n\r\n    const {\r\n      signUpDialog,\r\n      signInDialog,\r\n      resetPasswordDialog,\r\n      welcomeDialog,\r\n      settingsDialog,\r\n      addAvatarDialog,\r\n      changeAvatarDialog,\r\n      addDisplayNameDialog,\r\n      changeDisplayNameDialog,\r\n      addEmailAddressDialog,\r\n      signOutDialog\r\n    } = this.state;\r\n\r\n    const { snackbar } = this.state;\r\n\r\n    return (\r\n      <Router>\r\n        <MuiThemeProvider theme={theme}>\r\n          <div style={{ minHeight: '100vh', backgroundColor: theme.palette.type === 'dark' ? '#303030' : '#fafafa' }}>\r\n            {!isAuthReady &&\r\n              <LaunchScreen />\r\n            }\r\n\r\n            {isAuthReady &&\r\n              <React.Fragment>\r\n                <Bar\r\n                  title={settings.title}\r\n\r\n                  isSignedIn={isSignedIn}\r\n                  isPerformingAuthAction={isPerformingAuthAction}\r\n\r\n                  user={user}\r\n\r\n                  onSignUpClick={this.openSignUpDialog}\r\n                  onSignInClick={this.openSignInDialog}\r\n\r\n                  onSettingsClick={this.openSettingsDialog}\r\n                  onSignOutClick={this.openSignOutDialog}\r\n                />\r\n\r\n                <Switch>\r\n                  <Route path=\"/\" exact render={() => (<HomeContent isSignedIn={isSignedIn} title={settings.title} />)} />\r\n                  <Route component={NotFoundContent} />\r\n                </Switch>\r\n\r\n                {isSignedIn &&\r\n                  <React.Fragment>\r\n                    <Hidden only=\"xs\">\r\n                      <WelcomeDialog\r\n                        open={welcomeDialog.open}\r\n\r\n                        title={settings.title}\r\n                        user={user}\r\n                        isPerformingAuthAction={isPerformingAuthAction}\r\n\r\n                        onClose={this.closeWelcomeDialog}\r\n\r\n                        onCancelClick={this.closeWelcomeDialog}\r\n                        onVerifyClick={() => {\r\n                          this.verifyEmailAddress(() => {\r\n                            this.closeWelcomeDialog()\r\n                          })\r\n                        }}\r\n                      />\r\n\r\n                      <SettingsDialog\r\n                        open={settingsDialog.open}\r\n\r\n                        user={user}\r\n                        isPerformingAuthAction={isPerformingAuthAction}\r\n                        isVerifyingEmailAddress={isVerifyingEmailAddress}\r\n                        colors={colors}\r\n                        primaryColor={primaryColor}\r\n                        secondaryColor={secondaryColor}\r\n                        type={type}\r\n                        defaultTheme={settings.theme}\r\n\r\n                        onClose={this.closeSettingsDialog}\r\n                        onAddAvatarClick={this.openAddAvatarDialog}\r\n                        onChangeAvatarClick={this.openChangeAvatarDialog}\r\n                        onAddDisplayNameClick={this.openAddDisplayNameDialog}\r\n                        onChangeDisplayNameClick={this.openChangeDisplayNameDialog}\r\n                        onAddEmailAddressClick={this.openAddEmailAddressDialog}\r\n                        onVerifyEmailAddressClick={this.verifyEmailAddress}\r\n                        onPrimaryColorChange={this.changePrimaryColor}\r\n                        onSecondaryColorChange={this.changeSecondaryColor}\r\n                        onTypeChange={this.changeType}\r\n                        onResetClick={this.resetTheme}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        open={addAvatarDialog.open}\r\n\r\n                        title=\"Add avatar\"\r\n                        contentText=\"Your avatar is used to represent you. It's visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"photo\"\r\n                            autoFocus\r\n                            error={!!(addAvatarDialog.errors && addAvatarDialog.errors.avatar)}\r\n                            fullWidth\r\n                            helperText={(addAvatarDialog.errors && addAvatarDialog.errors.avatar) ? addAvatarDialog.errors.avatar[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleAvatarChange}\r\n                            placeholder=\"Avatar URL\"\r\n                            required\r\n                            type=\"url\"\r\n                            value={avatar}\r\n                          />\r\n                        }\r\n                        okText=\"Add\"\r\n                        disableOkButton={!avatar || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeAddAvatarDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            avatar: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeAddAvatarDialog}\r\n                        onOkClick={this.addAvatar}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        open={changeAvatarDialog.open}\r\n\r\n                        title=\"Change avatar\"\r\n                        contentText=\"Your avatar is used to represent you. It's visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"photo\"\r\n                            autoFocus\r\n                            error={!!(changeAvatarDialog.errors && changeAvatarDialog.errors.avatar)}\r\n                            fullWidth\r\n                            helperText={(changeAvatarDialog.errors && changeAvatarDialog.errors.avatar) ? changeAvatarDialog.errors.avatar[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleAvatarChange}\r\n                            placeholder={user.photoURL}\r\n                            required\r\n                            type=\"url\"\r\n                            value={avatar}\r\n                          />\r\n                        }\r\n                        okText=\"Change\"\r\n                        disableOkButton={!avatar || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeChangeAvatarDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            avatar: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeChangeAvatarDialog}\r\n                        onOkClick={this.changeAvatar}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        open={addDisplayNameDialog.open}\r\n\r\n                        title=\"Add display name\"\r\n                        contentText=\"Your display name is used to represent you. It's visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"name\"\r\n                            autoFocus\r\n                            error={!!(addDisplayNameDialog.errors && addDisplayNameDialog.errors.displayName)}\r\n                            fullWidth\r\n                            helperText={(addDisplayNameDialog.errors && addDisplayNameDialog.errors.displayName) ? addDisplayNameDialog.errors.displayName[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleDisplayNameChange}\r\n                            placeholder=\"Display name\"\r\n                            required\r\n                            type=\"text\"\r\n                            value={displayName}\r\n                          />\r\n                        }\r\n                        okText=\"Add\"\r\n                        disableOkButton={!displayName || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeAddDisplayNameDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            displayName: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeAddDisplayNameDialog}\r\n                        onOkClick={this.addDisplayName}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        open={changeDisplayNameDialog.open}\r\n\r\n                        title=\"Change display name\"\r\n                        contentText=\"Your display name is used to represent you. It's visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"name\"\r\n                            autoFocus\r\n                            error={!!(changeDisplayNameDialog.errors && changeDisplayNameDialog.errors.displayName)}\r\n                            fullWidth\r\n                            helperText={(changeDisplayNameDialog.errors && changeDisplayNameDialog.errors.displayName) ? changeDisplayNameDialog.errors.displayName[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleDisplayNameChange}\r\n                            placeholder={user.displayName}\r\n                            required\r\n                            type=\"text\"\r\n                            value={displayName}\r\n                          />\r\n                        }\r\n                        okText=\"Change\"\r\n                        disableOkButton={!displayName || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeChangeDisplayNameDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            displayName: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeChangeDisplayNameDialog}\r\n                        onOkClick={this.changeDisplayName}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        open={addEmailAddressDialog.open}\r\n\r\n                        title=\"Add e-mail address\"\r\n                        contentText=\"Your e-mail address is used to identify you. It's not visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                            error={!!(addEmailAddressDialog.errors && addEmailAddressDialog.errors.emailAddress)}\r\n                            fullWidth\r\n                            helperText={(addEmailAddressDialog.errors && addEmailAddressDialog.errors.emailAddress) ? addEmailAddressDialog.errors.emailAddress[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleEmailAddressChange}\r\n                            placeholder=\"E-mail address\"\r\n                            required\r\n                            type=\"email\"\r\n                            value={emailAddress}\r\n                          />\r\n                        }\r\n                        okText=\"Add\"\r\n                        disableOkButton={!emailAddress || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeAddEmailAddressDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            emailAddress: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeAddEmailAddressDialog}\r\n                        onOkClick={this.addEmailAddress}\r\n                      />\r\n                    </Hidden>\r\n\r\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\r\n                      <WelcomeDialog\r\n                        fullScreen\r\n                        open={welcomeDialog.open}\r\n\r\n                        title={settings.title}\r\n                        user={user}\r\n                        isPerformingAuthAction={isPerformingAuthAction}\r\n\r\n                        onClose={this.closeWelcomeDialog}\r\n\r\n                        onCancelClick={this.closeWelcomeDialog}\r\n                        onVerifyClick={() => {\r\n                          this.verifyEmailAddress(() => {\r\n                            this.closeWelcomeDialog()\r\n                          })\r\n                        }}\r\n                      />\r\n\r\n                      <SettingsDialog\r\n                        fullScreen\r\n                        open={settingsDialog.open}\r\n\r\n                        user={user}\r\n                        isPerformingAuthAction={isPerformingAuthAction}\r\n                        isVerifyingEmailAddress={isVerifyingEmailAddress}\r\n                        colors={colors}\r\n                        primaryColor={primaryColor}\r\n                        secondaryColor={secondaryColor}\r\n                        type={type}\r\n                        defaultTheme={settings.theme}\r\n\r\n                        onClose={this.closeSettingsDialog}\r\n                        onAddAvatarClick={this.openAddAvatarDialog}\r\n                        onChangeAvatarClick={this.openChangeAvatarDialog}\r\n                        onAddDisplayNameClick={this.openAddDisplayNameDialog}\r\n                        onChangeDisplayNameClick={this.openChangeDisplayNameDialog}\r\n                        onAddEmailAddressClick={this.openAddEmailAddressDialog}\r\n                        onVerifyEmailAddressClick={this.verifyEmailAddress}\r\n                        onPrimaryColorChange={this.changePrimaryColor}\r\n                        onSecondaryColorChange={this.changeSecondaryColor}\r\n                        onTypeChange={this.changeType}\r\n                        onResetClick={this.resetTheme}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        fullScreen\r\n                        open={addAvatarDialog.open}\r\n\r\n                        title=\"Add avatar\"\r\n                        contentText=\"Your avatar is used to represent you. It's visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"photo\"\r\n                            autoFocus\r\n                            error={!!(addAvatarDialog.errors && addAvatarDialog.errors.avatar)}\r\n                            fullWidth\r\n                            helperText={(addAvatarDialog.errors && addAvatarDialog.errors.avatar) ? addAvatarDialog.errors.avatar[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleAvatarChange}\r\n                            placeholder=\"Avatar URL\"\r\n                            required\r\n                            type=\"url\"\r\n                            value={avatar}\r\n                          />\r\n                        }\r\n                        okText=\"Add\"\r\n                        disableOkButton={!avatar || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeAddAvatarDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            avatar: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeAddAvatarDialog}\r\n                        onOkClick={this.addAvatar}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        fullScreen\r\n                        open={changeAvatarDialog.open}\r\n\r\n                        title=\"Change avatar\"\r\n                        contentText=\"Your avatar is used to represent you. It's visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"photo\"\r\n                            autoFocus\r\n                            error={!!(changeAvatarDialog.errors && changeAvatarDialog.errors.avatar)}\r\n                            fullWidth\r\n                            helperText={(changeAvatarDialog.errors && changeAvatarDialog.errors.avatar) ? changeAvatarDialog.errors.avatar[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleAvatarChange}\r\n                            placeholder={user.photoURL}\r\n                            required\r\n                            type=\"url\"\r\n                            value={avatar}\r\n                          />\r\n                        }\r\n                        okText=\"Change\"\r\n                        disableOkButton={!avatar || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeChangeAvatarDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            avatar: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeChangeAvatarDialog}\r\n                        onOkClick={this.changeAvatar}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        fullScreen\r\n                        open={addDisplayNameDialog.open}\r\n\r\n                        title=\"Add display name\"\r\n                        contentText=\"Your display name is used to represent you. It's visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"name\"\r\n                            autoFocus\r\n                            error={!!(addDisplayNameDialog.errors && addDisplayNameDialog.errors.displayName)}\r\n                            fullWidth\r\n                            helperText={(addDisplayNameDialog.errors && addDisplayNameDialog.errors.displayName) ? addDisplayNameDialog.errors.displayName[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleDisplayNameChange}\r\n                            placeholder=\"Display name\"\r\n                            required\r\n                            type=\"text\"\r\n                            value={displayName}\r\n                          />\r\n                        }\r\n                        okText=\"Add\"\r\n                        disableOkButton={!displayName || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeAddDisplayNameDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            displayName: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeAddDisplayNameDialog}\r\n                        onOkClick={this.addDisplayName}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        fullScreen\r\n                        open={changeDisplayNameDialog.open}\r\n\r\n                        title=\"Change display name\"\r\n                        contentText=\"Your display name is used to represent you. It's visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"name\"\r\n                            autoFocus\r\n                            error={!!(changeDisplayNameDialog.errors && changeDisplayNameDialog.errors.displayName)}\r\n                            fullWidth\r\n                            helperText={(changeDisplayNameDialog.errors && changeDisplayNameDialog.errors.displayName) ? changeDisplayNameDialog.errors.displayName[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleDisplayNameChange}\r\n                            placeholder={user.displayName}\r\n                            required\r\n                            type=\"text\"\r\n                            value={displayName}\r\n                          />\r\n                        }\r\n                        okText=\"Change\"\r\n                        disableOkButton={!displayName || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeChangeDisplayNameDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            displayName: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeChangeDisplayNameDialog}\r\n                        onOkClick={this.changeDisplayName}\r\n                      />\r\n\r\n                      <InputDialog\r\n                        fullScreen\r\n                        open={addEmailAddressDialog.open}\r\n\r\n                        title=\"Add e-mail address\"\r\n                        contentText=\"Your e-mail address is used to identify you. It's not visible to other users and can be changed any time.\"\r\n                        textField={\r\n                          <TextField\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                            error={!!(addEmailAddressDialog.errors && addEmailAddressDialog.errors.emailAddress)}\r\n                            fullWidth\r\n                            helperText={(addEmailAddressDialog.errors && addEmailAddressDialog.errors.emailAddress) ? addEmailAddressDialog.errors.emailAddress[0] : ''}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleEmailAddressChange}\r\n                            placeholder=\"E-mail address\"\r\n                            required\r\n                            type=\"email\"\r\n                            value={emailAddress}\r\n                          />\r\n                        }\r\n                        okText=\"Add\"\r\n                        disableOkButton={!emailAddress || isPerformingAuthAction}\r\n                        highlightOkButton\r\n\r\n                        onClose={this.closeAddEmailAddressDialog}\r\n                        onExited={() => {\r\n                          this.setState({\r\n                            emailAddress: ''\r\n                          });\r\n                        }}\r\n\r\n                        onCancelClick={this.closeAddEmailAddressDialog}\r\n                        onOkClick={this.addEmailAddress}\r\n                      />\r\n                    </Hidden>\r\n\r\n                    <ConfirmationDialog\r\n                      open={signOutDialog.open}\r\n\r\n                      title=\"Sign out?\"\r\n                      contentText=\"While signed out you are unable to manage your profile and conduct other activities that require you to be signed in.\"\r\n                      okText=\"Sign Out\"\r\n                      disableOkButton={isPerformingAuthAction}\r\n                      highlightOkButton\r\n\r\n                      onClose={this.closeSignOutDialog}\r\n                      onCancelClick={this.closeSignOutDialog}\r\n                      onOkClick={this.signOut}\r\n                    />\r\n                  </React.Fragment>\r\n                }\r\n\r\n                {!isSignedIn &&\r\n                  <React.Fragment>\r\n                    <Hidden only=\"xs\">\r\n                      <SignUpDialog\r\n                        open={signUpDialog.open}\r\n\r\n                        isPerformingAuthAction={isPerformingAuthAction}\r\n\r\n                        signUp={this.signUp}\r\n\r\n                        onClose={this.closeSignUpDialog}\r\n                        onAuthProviderClick={this.signInWithProvider}\r\n                      />\r\n\r\n                      <SignInDialog\r\n                        open={signInDialog.open}\r\n\r\n                        isPerformingAuthAction={isPerformingAuthAction}\r\n\r\n                        signIn={this.signIn}\r\n\r\n                        onClose={this.closeSignInDialog}\r\n                        onAuthProviderClick={this.signInWithProvider}\r\n                        onResetPasswordClick={this.openResetPasswordDialog}\r\n                      />\r\n                    </Hidden>\r\n\r\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\r\n                      <SignUpDialog\r\n                        fullScreen\r\n                        open={signUpDialog.open}\r\n\r\n                        isPerformingAuthAction={isPerformingAuthAction}\r\n\r\n                        signUp={this.signUp}\r\n\r\n                        onClose={this.closeSignUpDialog}\r\n                        onAuthProviderClick={this.signInWithProvider}\r\n                      />\r\n\r\n                      <SignInDialog\r\n                        fullScreen\r\n                        open={signInDialog.open}\r\n\r\n                        isPerformingAuthAction={isPerformingAuthAction}\r\n\r\n                        signIn={this.signIn}\r\n\r\n                        onClose={this.closeSignInDialog}\r\n                        onAuthProviderClick={this.signInWithProvider}\r\n                        onResetPasswordClick={this.openResetPasswordDialog}\r\n                      />\r\n                    </Hidden>\r\n\r\n                    <ResetPasswordDialog\r\n                      open={resetPasswordDialog.open}\r\n\r\n                      isPerformingAuthAction={isPerformingAuthAction}\r\n\r\n                      resetPassword={this.resetPassword}\r\n\r\n                      onClose={this.closeResetPasswordDialog}\r\n                    />\r\n                  </React.Fragment>\r\n                }\r\n\r\n                <Snackbar\r\n                  autoHideDuration={snackbar.autoHideDuration}\r\n                  message={snackbar.message}\r\n                  open={snackbar.open}\r\n                  onClose={this.closeSnackbar}\r\n                />\r\n              </React.Fragment>\r\n            }\r\n          </div>\r\n        </MuiThemeProvider>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n\r\n    const theme = JSON.parse(localStorage.getItem('theme'));\r\n\r\n    if (theme) {\r\n      this.updateTheme(theme);\r\n    }\r\n\r\n    this.removeAuthObserver = firebase.auth().onAuthStateChanged((user) => {\r\n      if (this._isMounted) {\r\n        this.setState({\r\n          isAuthReady: true,\r\n          isSignedIn: !!user,\r\n          user\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n\r\n    this.removeAuthObserver();\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'typeface-roboto';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}